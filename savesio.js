// Generated by CoffeeScript 1.10.0
(function() {
  this.saveString = function() {
    var box, file_string, j, len;
    file_string = "";
    for (j = 0, len = boxes.length; j < len; j++) {
      box = boxes[j];
      file_string += box.name + ";";
      file_string += box.text + ";";
      file_string += box.position.x + ";";
      file_string += box.position.y + ";";
      file_string += box.type + ";";
      file_string += box.boxID + ";";
      if (box.prevBox) {
        file_string += box.prevBox.boxID;
      }
      file_string += ";";
      if (box.yesBox) {
        file_string += box.yesBox.boxID;
      }
      file_string += ";";
      if (box.noBox) {
        file_string += box.noBox.boxID;
      }
      file_string += ";";
      file_string += "|";
    }
    file_string = file_string.slice(0, file_string.length - 1);
    return file_string;
  };

  this.loadString = function(file_string) {
    var box, error, file, i, j, k, l, len, line, ref, ref1, results;
    try {
      file = file_string.split("|");
      for (i = j = 0, ref = file.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        file[i] = file[i].split(";");
      }
      for (k = 0, len = file.length; k < len; k++) {
        line = file[k];
        box = new Box(line[4]);
        box.name = line[0];
        box.setText(line[1]);
        console.log(line[2]);
        console.log(line[3]);
        box.position = new Vector(parseInt(line[2]), parseInt(line[3]));
        box.boxID = parseInt(line[5]);
        this.boxes.push(box);
      }
      results = [];
      for (i = l = 0, ref1 = boxes.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
        if (file[i][6] !== "") {
          boxes[i].prevBox = GetByID(parseInt(file[i][6]));
        }
        if (file[i][7] !== "") {
          boxes[i].yesBox = GetByID(parseInt(file[i][7]));
        }
        if (file[i][8] !== "") {
          results.push(boxes[i].noBox = GetByID(parseInt(file[i][8])));
        } else {
          results.push(void 0);
        }
      }
      return results;
    } catch (error) {
      return alert("File corrupted!");
    }
  };

}).call(this);
