// Generated by CoffeeScript 1.10.0
(function() {
  var DisableAll, DrawNexts, DrawSelections, HTML_els, clickAction, lastID, moveName, selNoName, selYesName, selectName;

  HTML_els = (function() {
    function HTML_els() {}

    HTML_els.propID = 'prop';

    HTML_els.nameID = 'nameInput';

    HTML_els.commandID = 'cmdInput';

    HTML_els.nextPropID = 'nextProp';

    HTML_els.nextYesPropID = 'nextYesProp';

    HTML_els.nextNoPropID = 'nextNoProp';

    HTML_els.cmdPropID = 'cmdProp';

    HTML_els.evalPropID = 'evalProp';

    HTML_els.interPropID = 'interProp';

    HTML_els.interCmdID = 'interCmdProp';

    return HTML_els;

  })();

  this.cmdName = 'cmd';

  this.evalName = 'eval';

  this.interName = 'inter';

  selectName = 'sel';

  selYesName = 'selYes';

  selNoName = 'selNo';

  moveName = 'move';

  clickAction = '';

  this.selectedBox = null;

  lastID = 0;

  this.onload = function() {
    InitCanvas();
    return InitHTML();
  };

  this.InitHTML = function() {
    HTML_els.curModeEl = document.getElementById('curMode');
    HTML_els.propEl = document.getElementById(HTML_els.propID);
    HTML_els.nameEl = document.getElementById(HTML_els.nameID);
    HTML_els.commandEl = document.getElementById(HTML_els.commandID);
    HTML_els.nextPropEl = document.getElementById(HTML_els.nextPropID);
    HTML_els.YesPropEl = document.getElementById(HTML_els.nextYesPropID);
    HTML_els.NoPropEl = document.getElementById(HTML_els.nextNoPropID);
    HTML_els.cmdPropEl = document.getElementById(HTML_els.cmdPropID);
    HTML_els.evalPropEl = document.getElementById(HTML_els.evalPropID);
    HTML_els.interPropEl = document.getElementById(HTML_els.interPropID);
    return HTML_els.interCmdEl = document.getElementById(HTML_els.interCmdID);
  };

  this.LoadDia = function() {
    this.boxes = [];
    loadString(document.getElementById("loadInput").value);
    return RestoreCtx();
  };

  this.RunDia = function() {
    document.getElementById("saveOutput").value = saveString();
    eraseVars();
    return InterpreteBox(this.selectedBox);
  };

  this.StopDia = function() {
    var stop;
    stop = true;
    return alert("The diagram has been stopped");
  };

  this.SelectType = function(type) {
    switch (type) {
      case 'cmd':
        clickAction = cmdName;
        return HTML_els.curModeEl.innerHTML = "Add Command";
      case 'eval':
        clickAction = evalName;
        return HTML_els.curModeEl.innerHTML = "Add Evaluation";
      case 'inter':
        clickAction = interName;
        return HTML_els.curModeEl.innerHTML = "Add Interface";
      case 'selYes':
        clickAction = selYesName;
        if (this.selectedBox.type === cmdName || this.selectedBox.type === interName) {
          return HTML_els.curModeEl.innerHTML = "Select Next Box";
        } else {
          return HTML_els.curModeEl.innerHTML = "Select Yes Box";
        }
        break;
      case 'selNo':
        clickAction = selNoName;
        return HTML_els.curModeEl.innerHTML = "Select No Box";
      case 'move':
        clickAction = moveName;
        return HTML_els.curModeEl.innerHTML = "Move Box";
    }
  };

  this.OnNameChange = function(text) {
    return this.selectedBox.name = text;
  };

  this.OnCommandChange = function(text) {
    this.selectedBox.setText(text);
    RestoreCtx();
    return DrawSelections();
  };

  this.DeleteSelBox = function() {
    DeleteBoxByID(this.selectedBox.boxID);
    if (this.selectedBox.prevBox) {
      if (this.selectedBox.prevBox.yesBox) {
        if (this.selectedBox.prevBox.yesBox.boxID === this.selectedBox.boxID) {
          this.selectedBox.prevBox.yesBox = null;
        } else {
          this.selectedBox.prevBox.noBox = null;
        }
      } else {
        this.selectedBox.prevBox.noBox = null;
      }
    }
    this.selectedBox = null;
    HTML_els.propEl.setAttribute('hidden', '');
    return RestoreCtx();
  };

  DisableAll = function() {
    HTML_els.cmdPropEl.setAttribute('hidden', '');
    HTML_els.evalPropEl.setAttribute('hidden', '');
    HTML_els.interPropEl.setAttribute('hidden', '');
    return HTML_els.interCmdEl.setAttribute('hidden', '');
  };

  this.CanvasClick = function(event) {
    var clickedCell, gx, gy, newBox, x, y;
    x = event.offsetX;
    y = event.offsetY;
    gx = Math.round(x / (boxSize[0] + gridDist)) * (boxSize[0] + gridDist);
    gy = Math.round(y / (boxSize[1] + gridDist)) * (boxSize[1] + gridDist);
    clickedCell = GetBoxByCoords(gx, gy);
    if (clickAction === selYesName || clickAction === selNoName) {
      if (clickedCell) {
        if (this.selectedBox !== clickedCell) {
          if (clickAction === selYesName) {
            clickAction = selectName;
            this.selectedBox.yesBox = clickedCell;
            this.selectedBox.yesBox.prevBox = this.selectedBox;
          } else {
            clickAction = selectName;
            this.selectedBox.noBox = clickedCell;
            this.selectedBox.noBox.prevBox = this.selectedBox;
          }
          RestoreCtx();
          DrawSelections();
          SetSelectionGUI(this.selectedBox);
        } else {
          alert('Cannot set next as itself!');
        }
      }
      return;
    } else if (clickAction === cmdName || clickAction === evalName || clickAction === interName) {
      if (!clickedCell) {
        newBox = new Box(clickAction + "");
        newBox.position = new Vector(gx, gy);
        newBox.name = clickAction + lastID.toString();
        newBox.setText('"Input command"');
        newBox.boxID = lastID;
        lastID += 1;
        this.boxes.push(newBox);
        clickedCell = newBox;
        DrawBox(gx, gy);
      } else {
        alert('Position already occupied');
      }
    } else if (clickAction === moveName) {
      if (!clickedCell) {
        this.selectedBox.position.x = gx;
        this.selectedBox.position.y = gy;
        RestoreCtx();
        DrawSelections();
      } else {
        alert('Position already occupied');
      }
      clickAction = selectName;
      HTML_els.curModeEl.innerHTML = "Selecting";
      return;
    }
    clickAction = selectName;
    if (clickedCell) {
      RestoreCtx();
      this.selectedBox = clickedCell;
      HTML_els.curModeEl.innerHTML = "Selecting";
      HTML_els.propEl.removeAttribute('hidden');
      HTML_els.nameEl.value = this.selectedBox.name;
      HTML_els.commandEl.value = this.selectedBox.text;
      SetSelectionGUI(this.selectedBox);
      DrawSelections();
      DisableAll();
      switch (this.selectedBox.type) {
        case cmdName:
          HTML_els.cmdPropEl.removeAttribute('hidden');
          return HTML_els.interCmdEl.removeAttribute('hidden');
        case interName:
          HTML_els.interPropEl.removeAttribute('hidden');
          return HTML_els.interCmdEl.removeAttribute('hidden');
        case evalName:
          return HTML_els.evalPropEl.removeAttribute('hidden');
      }
    } else {
      RestoreCtx();
      HTML_els.propEl.setAttribute('hidden', '');
      return DisableAll();
    }
  };

  DrawSelections = function() {
    DrawSelection(this.selectedBox.position.x, this.selectedBox.position.y);
    return DrawNexts();
  };

  DrawNexts = function() {
    if (this.selectedBox.yesBox) {
      DrawSelection(this.selectedBox.yesBox.position.x, this.selectedBox.yesBox.position.y, "green");
      DrawConnection(this.selectedBox, this.selectedBox.yesBox, "green");
    }
    if (this.selectedBox.noBox) {
      DrawSelection(this.selectedBox.noBox.position.x, this.selectedBox.noBox.position.y, "blue");
      return DrawConnection(this.selectedBox, this.selectedBox.noBox, "blue");
    }
  };

  this.SetSelectionGUI = function(box) {
    switch (box.type) {
      case cmdName || interName:
        if (box.yesBox) {
          return HTML_els.nextPropEl.innerHTML = box.yesBox.name;
        } else {
          return HTML_els.nextPropEl.innerHTML = '...';
        }
        break;
      case evalName:
        if (box.yesBox) {
          HTML_els.YesPropEl.innerHTML = box.yesBox.name;
        } else {
          HTML_els.YesPropEl.innerHTML = '...';
        }
        if (box.noBox) {
          return HTML_els.NoPropEl.innerHTML = box.noBox.name;
        } else {
          return HTML_els.NoPropEl.innerHTML = '...';
        }
    }
  };

}).call(this);
